{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About","text":""},{"location":"about/code-of-conduct/","title":"Code of Conduct","text":""},{"location":"about/contributing/","title":"Contributing","text":""},{"location":"about/credits/","title":"Credits and Acknowledgements","text":""},{"location":"about/license/","title":"License","text":"<p>This is free and unencumbered software released into the public domain.</p> <p>Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.</p> <p>In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>For more information, please refer to https://unlicense.org</p>"},{"location":"about/roadmap/","title":"Roadmap","text":""},{"location":"about/security/","title":"Security","text":""},{"location":"development/server/architecture/","title":"Architecture","text":""},{"location":"development/server/architecture/#architecture","title":"Architecture","text":""},{"location":"development/server/architecture/#overview","title":"Overview","text":"<p>This project uses the following architecture:</p> <pre><code>graph LR\n    subgraph \"Docker\"\n        subgraph \"Services\"\n            subgraph \"Media\"\n                subgraph \"Navidrome\"\n                    subgraph \"Music\"\n                        subgraph \"Beets\"\n                        end\n                        subgraph \"MusicBrainz\"\n                        end\n                        subgraph \"MusicBrainz Picard\"\n                        end\n                        subgraph \"youtube-dl\"\n                        end\n                        subgraph \"spotdl\"\n                        end\n                    end\n                    subgraph \"Video\"\n                        subgraph \"ffmpeg\"\n                        end\n                        subgraph \"HandBrake\"\n                        end\n                        subgraph \"MediaInfo\"\n                        end\n                        subgraph \"youtube-dl\"\n                        end\n                    end\n                end\n                subgraph \"Plex\"\n                end\n                subgraph \"SubSonic\"\n                end\n            end\n            subgraph \"Reverse Proxy\"\n                subgraph \"Nginx\"\n                end\n                subgraph \"Traefik\"\n                end\n            end\n            subgraph \"Management\"\n                subgraph \"Portainer\"\n                end\n                subgraph \"Watchtower\"\n                end\n            end\n        end\n        subgraph \"Tools\"\n            subgraph \"OpenAPI\"\n                subgraph \"Swagger UI\"\n                end\n                subgraph \"Redocly\"\n                end\n                subgraph \"OpenAPI Generator\"\n                end\n            end\n        end\n    end\n    subgraph \"GitHub\"\n    end\n</code></pre> <p>```</p>"},{"location":"development/server/security/","title":"Security","text":"<p>Note: This document is a work in progress.</p>"},{"location":"development/server/security/#certificate-authority-ca-ssltls-certificates","title":"Certificate Authority (CA) &amp; SSL/TLS Certificates","text":"<p>An SSL Certificate is a popular type of Digital Certificate that binds the ownership details of a web server (and website) to cryptographic keys. These keys are used in the SSL/TLS protocol to activate a secure session between a browser and the web server hosting the SSL Certificate. In order for a browser to trust an SSL Certificate, and establish an SSL/TLS session without security warnings, the SSL Certificate must contain the domain name of website using it, be issued by a trusted CA, and not have expired. - Source: What is a Certificate Authority? (globalsign.com)</p> <ul> <li>Certificate Authority is an entity that issues digital certificates.</li> </ul> <p>This project utilizes Caddy as a web server and reverse proxy. Caddy is configured to automatically obtain and renew SSL/TLS certificates from Let's Encrypt, a free, automated, and open certificate authority.</p> <p>Caddy Server makes use of an SSL Certificate in the TLS configuration for my domain/sub-domain.</p>"},{"location":"development/server/security/#local-development","title":"Local Development","text":"<p>For local development, I use a self-signed certificate. This is a certificate that is signed by the developer, rather than a certificate authority. This is not a certificate that is trusted by browsers, but it is sufficient for local development.</p> <p>Using certificates from real certificate authorities (CAs) for development can be dangerous or impossible (for hosts like example.test, localhost or 127.0.0.1), but self-signed certificates cause trust errors. Managing your own CA is the best solution, but usually involves arcane commands, specialized knowledge and manual steps. - Source: FiloSottile/mkcert: A simple zero-config tool to make locally trusted development certificates with any names you'd like. (github.com)</p> <p>To avoid this, we will learn how to use mkcert tool so we can create local CA and generate locally-trusted certificates.</p> <p>Let\u2019s Encrypt is a free, automated, and open certificate authority brought to you by the non-profit Internet Security Research Group (ISRG). - Source: About Let's Encrypt - Let's Encrypt (letsencrypt.org)</p> <p>To understand why we cannot use it, I recommend reading following links:</p> <ul> <li>Let\u2019s Encrypt \u2014 For local development.</li> <li>Code with Hugo \u2014 Why we can\u2019t use Let\u2019s Encrypt.</li> </ul>"},{"location":"development/server/security/#why-not-use-nginx","title":"Why Not Use Nginx","text":"<p>nginx is fine, however its configuration can be pain for some, specially beginners.</p> <p>caddy comes with good defaults and easy to configure. It\u2019s a HTTP web-server that defaults to HTTP/2 and HTTPS. It can automatically generate certificates for you using Let\u2019s Encrypt.</p>"},{"location":"development/server/security/#reverse-proxy-vs-load-balancer","title":"Reverse Proxy vs. Load Balancer","text":"<p>Both act as intermediaries in the communication between the clients and servers.</p> <ul> <li>A reverse proxy accepts a request from a client, forwards it to a server that can fulfill it, and returns the server\u2019s response to the client.</li> </ul> <p></p> <ul> <li>A load balancer distributes incoming client requests among a group of servers, in each case returning the response from the selected server to the appropriate client.</li> </ul> <p></p> <p>So here, we are not looking for balancing some load between apps (servers), we want a reverse-proxy which handles HTTPS requests for public-like domain to the right apps behind it.</p>"},{"location":"development/server/security/#what-we-are-going-to-do","title":"What We Are Going To Do","text":"<p>We will learn how to create local CA, and generate local trusted certificate for .foo.bar* domain, so we can make use of it for two subdomains backend.foo.bar and frontend.foo.bar**.</p> <p>Then we will configure caddy to reverse proxy both the backend &amp; frontend apps so we can run them over HTTPS connections behind it.</p> <p>NOTE \u2014 I created two apps (a frontend app using Vue.js and a backend app using node.js) and configured caddy to work for a situation where the frontend app is communicating over HTTPS using cookies in secure mode to make actions that need authorization. Please refer to the repo for testing the whole project and see it works in your local environment.</p>"},{"location":"development/tools/","title":"Index","text":""},{"location":"development/tools/#tools","title":"Tools","text":"<p>Tools for working with the project.</p>"},{"location":"development/tools/#table-of-contents","title":"Table of Contents","text":""},{"location":"development/tools/#overview","title":"Overview","text":"<p>This project uses the following tools:</p> <ul> <li>Git - Version control system.</li> <li>GitHub - Git repository hosting service.</li> <li>Docker - Containerization platform.</li> <li>Docker Compose - Tool for defining and running multi-container Docker applications.</li> <li>Navidrome - Open source web-based music collection server and streamer.</li> <li>Plex - Media server.</li> <li>SubSonic - Open source web-based media streamer and jukebox.</li> <li>Beets - Open source music library manager and MusicBrainz tagger.</li> <li>MusicBrainz - Open music encyclopedia that collects music metadata and makes it available to the public.</li> <li>MusicBrainz Picard - MusicBrainz tagger.</li> <li>MusicBrainz Picard Plugins - Plugins for MusicBrainz Picard.</li> <li>youtube-dl - Command-line program to download videos from YouTube.com and a few more sites.</li> <li>youtube-dl Plugins</li> <li>spotdl - Spotify downloader.</li> <li>ffmpeg - Cross-platform solution to record, convert and stream audio and video.</li> <li>HandBrake - Open source video transcoder.</li> <li>MediaInfo - Convenient unified display of the most relevant technical and tag data for video and audio files.</li> <li>Nginx - Web server and reverse proxy.</li> <li>Nginx Proxy Manager - Web-based GUI for the Nginx Proxy.</li> <li>Traefik - Open source reverse proxy and load balancer for HTTP and TCP-based applications.</li> <li>Traefik Pilot - Web-based GUI for Traefik.</li> <li>Portainer - Open source container management GUI.</li> <li>Watchtower - Automatic updates for Docker containers.</li> <li>OpenAPI Specification - Machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services.</li> <li>Swagger UI - Open source tool for generating interactive API documentation.</li> <li>Redocly - Open source tool for generating interactive API documentation.</li> <li>OpenAPI Generator - Open source tool for generating API client libraries, server stubs, documentation, and configuration files.</li> <li>Python - Programming language.</li> </ul>"},{"location":"development/tools/navidrome/docker/","title":"Docker and Docker Compose Configuration for Navidrome","text":"<p>Docker images are available for the linux/amd64, linux/arm/v6, linux/arm/v7 and linux/arm64 platforms. They include everything needed to run Navidrome.</p>"},{"location":"development/tools/navidrome/docker/#docker-compose","title":"Docker Compose","text":"<p>Create a <code>docker-compose.yml</code> file with the following content (or simply add the <code>navidrome</code> service to an existing <code>docker-compose.yml</code> file):</p> <pre><code>services:\n  navidrome:\n    image: deluan/navidrome:latest\n    user: 1000:1000 # should be owner of volumes\n    ports:\n      - \"4533:4533\"\n    restart: unless-stopped\n    environment:\n      ND_SCANSCHEDULE: 1h\n      ND_LOGLEVEL: info\n      ND_SESSIONTIMEOUT: 24h\n      ND_BASEURL: \"\"\n    volumes:\n      - \"/path/to/data:/data\"\n      - \"/path/to/your/music/folder:/music:ro\"\n</code></pre> <p>Start the container with:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Note that environment variables are used to configure Navidrome. You can find a list of all available variables in the Configuration section of this documentation for Navidrome.</p>"},{"location":"development/tools/navidrome/docker/#docker","title":"Docker","text":"<p>Run Navidrome in a Docker container:</p> <pre><code>docker run -d \\\n  --name navidrome \\\n  --restart unless-stopped \\\n  --user $(id -u):$(id -g) \\\n  -v /path/to/music:/music \\\n  -v /path/to/data:/data \\\n  -p 4533:4533 \\\n  -e ND_LOGLEVEL=info \\\n  deluan/navidrome:latest\n</code></pre> <p>The command above will launch Navidrome in a docker container with the following configuration:</p> <ul> <li>The base docker image used is <code>deluan/navidrome</code>.</li> <li>The container will be named <code>navidrome</code>.</li> <li>The container will restart automatically unless stopped.</li> <li>The container will run as the current user, so that the files created in the mounted volumes will have the correct permissions.</li> <li>The music files will be mounted from <code>/path/to/music</code> on the host to <code>/music</code> in the container.</li> <li>The database files will be mounted from <code>/path/to/data</code> on the host to <code>/data</code> in the container.</li> <li>The web interface will be available on port <code>4533</code> on the host.</li> <li>The log level will be set to <code>info</code>.</li> </ul>"},{"location":"overview/","title":"Getting Started","text":""}]}